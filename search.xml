<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试简单算法.md</title>
      <link href="/2020/07/05/%E9%9D%A2%E8%AF%95%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
      <url>/2020/07/05/%E9%9D%A2%E8%AF%95%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>冒泡、选择、快排</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">7</span>};</span><br><span class="line">        <span class="comment">//bubbleSort(arr);</span></span><br><span class="line">        <span class="comment">//selectionSort(arr);</span></span><br><span class="line">        quickSort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> ; i ++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j ++){</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]){</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j  + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> ; i ++){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j ++){</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]){</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * 快速排序需要注意的地方就是要先从右边开始判断</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> low</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> high</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low , <span class="keyword">int</span> high)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(low &gt; high) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> i , j,temp;</span><br><span class="line">        i = low;</span><br><span class="line">        j = high;</span><br><span class="line">        temp = arr[low];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) {</span><br><span class="line">            <span class="comment">//先右</span></span><br><span class="line">            <span class="keyword">while</span> (temp &lt;= arr[j] &amp;&amp; i &lt; j){</span><br><span class="line">                j--;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//再左</span></span><br><span class="line">            <span class="keyword">while</span> (temp &gt;= arr[i] &amp;&amp; i &lt; j) {</span><br><span class="line">                i ++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) {</span><br><span class="line">                <span class="keyword">int</span> t = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = t;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        arr[low] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line"></span><br><span class="line">        quickSort(arr,low,j-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr,j + <span class="number">1</span>,high);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><blockquote><p>需要注意的地方就是在二分查找时，要在折半查询之后再将算出中间值（middle），不能在循环一开始就算中间值</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入需要查询的值："</span>);</span><br><span class="line">        <span class="keyword">int</span> key = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>};</span><br><span class="line">        <span class="comment">//int[] arr = {2,2,3,4,5,5,8,9};</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x = commBinarySearch(arr,key);</span><br><span class="line">        <span class="keyword">if</span> (x == -<span class="number">1</span>){</span><br><span class="line">            System.out.println(<span class="string">"数组中没有这个值"</span>);</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">            System.out.println(<span class="string">"查找的这个数在数组中排序后的位置为："</span>+ x);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">commBinarySearch</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> key)</span></span>{</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> middle = (low + high) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(key &lt; arr[low] || key &gt; arr[high] || low &gt; high){</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) {</span><br><span class="line">            <span class="keyword">if</span>(key &lt; arr[middle]){</span><br><span class="line">                high = middle - <span class="number">1</span>;</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(key &gt; arr[middle]){</span><br><span class="line">                low = middle + <span class="number">1</span>;</span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> middle;</span><br><span class="line">            }</span><br><span class="line">            middle = (low + high) /<span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//StringBuffer中的reverse()方法</span></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Hello World"</span>);</span><br><span class="line">        System.out.println(sb.reverse().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义方法</span></span><br><span class="line">        String str = <span class="string">"Hello World"</span>;</span><br><span class="line">        System.out.println(reverseStr(str));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseStr</span><span class="params">(String str)</span></span>{</span><br><span class="line">        String reverse = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = str.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--){</span><br><span class="line">            reverse += str.charAt(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> reverse;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>懒汉式</p><p>线程不安全，延迟初始化，严格意义上不是单例模式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}<span class="comment">//私有构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>){</span><br><span class="line">            singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>饿汉模式</strong><br>线程安全，比较常用，但容易产生垃圾，因为一开始就初始化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>双重锁模式</strong><br>线程安全，延迟初始化。这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</p><p>双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于<code>singleton=new Singleton()</code>对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用<code>volatile</code>修饰<code>signleton</code>实例变量有效，解决该问题。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>{</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>){</span><br><span class="line">                    singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>静态内部类单例模式</strong><br>只有第一次调用<code>getInstance</code>方法时，虚拟机才加载<code>Inner</code>并初始化<code>instance</code>，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，但具体还是根据项目选择。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{</span><br><span class="line">    }</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> Inner.instance;  </span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://zhuanlan.zhihu.com/p/33102022?from_voters_page=true" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33102022?from_voters_page=true</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android/Java面试题总结2020</title>
      <link href="/2020/07/05/Android-Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%932020/"/>
      <url>/2020/07/05/Android-Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%932020/</url>
      
        <content type="html"><![CDATA[<h5>*******************知识总结**************</h5><p><a href="https://blog.csdn.net/z151213/article/details/106619455" target="_blank" rel="noopener">Android面试题总结（含答案），欢迎各位补充。_z151213的博客-CSDN博客_android面试题总结(含答案),欢迎各位补充。</a></p><h5>*******************面试总结**************</h5><p>某桥，某康，某条，某旷，职位需求略有不同：</p><p>主要是Java、C++（OpenGL）、Android</p><p>mvp，mvvm，你为什么会有这样的转变，mvvm优势在哪<br>Context相关（application的，Service，Activity的）<br>Handler需要深入了解（为什么底层while不会卡死等？）<br>网络如何优化（数据传输优化）<br>图像oom具体如何深度优化<br>两个单链表，如何超找公共节点（一个节点同时存在两个单链表）<br>如何设计Android 日志系统，同时如何保证程序崩溃了日志也能得到上传<br>两个线程交替打印1 3 5 246……. 结果展示： 1 2 3 4 5 6..<br>Android Binder深入理解部分（越深入越好）<br>luncher之后的流程<br>内存堆栈如何分析，如何查看死循环，如何分析界面卡顿的问题（从哪些方面入手）<br>Surfaceflinger类深入分析（源码）</p><p>其他职位需求：</p><p>C++的#define ##符号 #typedef 构造，析构，new malloc free等</p><p>OpenGL的渲染流程，Buffer，Cpu，Gpu，VBO，FBO等概念，多线程渲染问题？</p><p>OpenGL渲染脚本Shader相关基础数据类型，简单样例代码，以及如何和顶点等传输交互等</p><p>图片格式，视频格式有了解过没，如何转换了解过没</p><h5>***************多源码多算法**************</h5><p>Java(熟悉的前提下需要专攻源码解读):</p><p>1.集合（map collection-list/set）</p><p>2.多线程（几种锁，线程池）</p><p>3.jvm，内存管理（内存回收）</p><p>4.网络（模型，socket，https，tcp/ip，加密，参数）</p><p>5.常用算法（二叉树，深度宽度，红黑树）</p><p>【附，I think】从事后台还需要攻读相关框架源码，练习手写乞丐版框架(可参考其他资料)</p><p>Android(需要多源码):</p><p>1.Context深入了解(继承关系源码解读)</p><p>2.Binder机制</p><p>3.Handler机制</p><p>4.Service用法场景</p><p>5.luncher流程</p><p>6.mvp,mvvm演变</p><p>7.性能优化(oom，图像-&gt;Surfaceflinger优化，视频加密压缩，电池电量优化)</p><p>8.性能分析(内存堆栈分析，cpu，过渡绘制)</p><h5>***************软实力(参考)**************</h5><ol start="0"><li>简单介绍下自己（如果工作时间长，经历多。要简单概要，比如“我叫黄磊，从事互联网已经5年，第一个项目主要是地图插件开发，主要是对OpenGL绘制熟悉。第二个开始从事Android方向，也是这个时候开始深入这块，对系统源码，一些框架都有做过深入学习和实践”） - 尽量简短吧，挑自己擅长的来总结！</li></ol><p>过往项目中遇到的最难的问题（有实际印象深的可以描述，我描述了之前关于一个项目从Android3D迁移到U3D引擎的过程，以及为何这样做）<br>你最讨厌跟什么样的人交流（千万不要正面回答，要回答“交流协调是一个过程，有分歧很正常的，不存在什么讨厌不讨厌”，大概就是要阐述如何团队合作，如何协调工作）<br>你对加班怎么看（要表示出你并不反对加班，因为项目紧，赶工期，上线都是很正常的事情）<br>介绍下你最近项目，以及项目从开始到上线，是如何分配工作，安排（可以简单描述下产品原型-&gt;评审-&gt;最终原型-&gt;设计图-&gt;开发-&gt;测试-&gt;上线）<br>你们团队规模（可以稍微说的大一点，以及你对团队职责的了解，显得你不只是守着自己的一亩三分地）<br>可能会问你架构的演变，为什么这样演变（mvp到mvvm）<br>如何保证项目稳定性（可以往大量测试，网络，性能，内存等优化方向，如果实践过自动化测试，可以提及； 热修复实践过可以提及，之前文章有介绍过）<br>期望薪资，看个人情况<br>暂时回忆了这些，等想起其他的再补充</p><p>Next，将完善新项目，届时会将很多自定义组件（进度条，banner，文本图片组合+角标，底部角标，官方Exoplayer视频界面，收货地址管理（仿某团，带高德地图点选相关界面，城市索引页面等），顶部角标Tab等独立原生自定义实现）也精简后更新工程，这个要等新项目完成后有时间搞！<a href="https://github.com/FanChael/MVVM" target="_blank">FanChael/MVVM</a> - 欢迎提前关注一波！</p><img src="https://pic2.zhimg.com/80/v2-d1c0111ffa562e8bc2ce4a412b113945_1440w.jpg"><p>希望菜鸟你我可以共勉，多源码，多算法，江湖再战！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
          <category> Java基础 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
            <tag> 2020 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面经</title>
      <link href="/2020/07/05/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/05/%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="5-21、先从科技有限公司"><a href="#5-21、先从科技有限公司" class="headerlink" title="5.21、先从科技有限公司"></a>5.21、先从科技有限公司</h1><p>面试：</p><ol><li>项目讲解，亮点部分</li><li>spring的初始化流程（IOC初始化）</li><li>springMVC工作流程</li><li>mybatis缓存</li><li>SQL优化</li></ol><h1 id="5-21、海纳丰科技有限公司"><a href="#5-21、海纳丰科技有限公司" class="headerlink" title="5.21、海纳丰科技有限公司"></a>5.21、海纳丰科技有限公司</h1><p>面试：</p><ol><li>java面向对象</li><li>多线程创建方式</li><li>spring和springMVC区别</li><li>springMVC中注解和用处</li><li>springMVC工作流程</li><li>集合</li><li>SQL优化</li><li>注入依赖方式</li></ol><h1 id="5-22、超然祥润有限公司"><a href="#5-22、超然祥润有限公司" class="headerlink" title="5.22、超然祥润有限公司"></a>5.22、超然祥润有限公司</h1><p>笔试部分：</p><ol><li>能力测试！（IQ）</li><li>前端JavaScript代码编写</li><li>ajax的介绍，原理</li></ol><p>面试部分</p><ol><li>项目讲解</li><li>多线程相关知识，<font color="red">项目中那些地方用到了多线程</font></li><li><font color="red">事务相关知识，以及自己项目中那些地方用到了事务</font></li><li>spring 的IOC和AOP相关知识</li><li>springMVC工作流程</li><li>集合，<font color="red">map中有哪些方法</font></li><li>SQL优化</li></ol><h1 id="6-19、西辰软件"><a href="#6-19、西辰软件" class="headerlink" title="6.19、西辰软件"></a>6.19、西辰软件</h1><p>笔试部分：</p><ol><li>JDBC连接</li><li>SQL</li></ol><h1 id="6-23、海乂知信息科技有限公司"><a href="#6-23、海乂知信息科技有限公司" class="headerlink" title="6.23、海乂知信息科技有限公司"></a>6.23、海乂知信息科技有限公司</h1><p>技术面试：</p><ul><li>error和exception的父类</li><li>SQL优化</li><li>JDBC连接过程</li><li>索引介绍</li><li>List中有几条数据，要求在进行迭代的时候删除一条数据，怎么删除</li><li>SQL数据访问量过大怎么办</li><li>Linux命令</li><li>多线程，线程池</li><li>对算法的理解</li></ul><p>负责人面试：</p><ul><li>你在实习中遇到的困难？</li><li>你解决问题要多久？</li><li>你认为你的优势是什么？</li><li>你认为你能给公司带来什么？</li><li>你的职业规划？</li><li>近期打算？</li><li>能问我三个问题？</li></ul><h1 id="6-30、四川创博云软信息技术有限公司"><a href="#6-30、四川创博云软信息技术有限公司" class="headerlink" title="6.30、四川创博云软信息技术有限公司"></a>6.30、四川创博云软信息技术有限公司</h1><ul><li>数据库中列和行之间的转换？</li><li>error和exception的区别？</li><li>SpringBoot常用命令？</li><li>JDK，JRE，JVM？</li></ul><h1 id="6-30、鸿达安视"><a href="#6-30、鸿达安视" class="headerlink" title="6.30、鸿达安视"></a>6.30、鸿达安视</h1><p><strong>面试部分：</strong></p><ul><li>java面向对象的特征，封装、继承、多态</li><li>final、finally、finalize区别</li><li>事务回滚发生错误怎么办？</li><li>垃圾回收机制回收对象以及垃圾回收机制什么时候回收？</li><li>分库、分表</li><li>SpringBoot比起SSM的优势？</li><li>SpringBean的生命周期？</li><li>ArrayList，Vocter,LinkedList的区别？</li><li>链表的添加和删除元素的底层实现？</li><li>数，队列？</li><li>hashmap中转红黑树？</li><li>mybatis中一级缓存和二级缓存？</li><li>Linux中的常用命令，权限命令，权限分级？</li><li>数据库的引擎分类</li></ul><h1 id="7-2、汉图"><a href="#7-2、汉图" class="headerlink" title="7.2、汉图"></a>7.2、汉图</h1><p><strong>笔试：</strong></p><ul><li><strong>接口中可以定义的方法</strong>（选择题？除了abstract方法之外，还有default(缺省)和static）</li><li>多线程中的锁（volatile和synchronized）</li><li>单例模式</li><li>error和exception，CheckedException和RuntimeException区别</li><li>类的实例化顺序</li><li>spring的优点</li><li>spring的作用域</li><li>#{}和${}区别</li><li><strong>Sql语句（没写出来）</strong></li></ul><p><strong>面试：</strong></p><ul><li><strong>@Controller和@RestController的区别</strong></li><li>JSP九大内置对象</li><li>servlet生命周期</li><li>乐观锁和悲观锁</li><li>ACID</li><li>Linux常用命令，<strong>查看内存等</strong></li><li>maven常用命令（clean，test,compile,package,install,deploy）</li><li>maven打包等</li><li><strong>springBoot运行jar</strong></li><li>项目中遇到的问题？（这个问题回答得不太好）</li></ul><p>还有几个问题忘记了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java面试 </category>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java面试 </tag>
            
            <tag> 先从科技有限公司 </tag>
            
            <tag> 海纳丰科技有限公司 </tag>
            
            <tag> 超然祥润有限公司 </tag>
            
            <tag> 海乂知信息科技有限公司 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/04/hello-world/"/>
      <url>/2020/07/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
